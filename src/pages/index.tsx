import Head from "next/head";
import { api } from " /utils/api";
import { useUser } from "@clerk/nextjs";
import Image from "next/image";
import { LoadingPage } from " /components/loading";
import { useState } from "react";
import { toast } from "react-hot-toast";
import { PageLayout } from " /components/layout";
import { PostView } from " /components/postView";

const CreatePostWizard = () => {
  const [input, SetInput] = useState("");
  const user = useUser();
  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      SetInput("");
      void ctx.posts.getAll.invalidate();
    },
    onError: (err) => {
      const errorMessage = err.data?.zodError?.formErrors[0];

      if (errorMessage && errorMessage[0]) toast.error(errorMessage);
      else toast.error(err.message);
    },
  });

  if (!user.user) return null;

  return (
    <div className="flex gap-3 p-4">
      <Image
        className="rounded-full"
        src={user.user?.imageUrl}
        alt="pp"
        width={56}
        height={56}
        priority={true}
      />
      <input
        className="w-full p-1 outline-none"
        placeholder="What's on your mind?"
        type="text"
        value={input}
        onChange={(e) => SetInput(e.target.value)}
        disabled={isPosting}
      />

      {!isPosting && (
        <button onClick={() => mutate({ content: input })} disabled={isPosting}>
          Post
        </button>
      )}

      {isPosting && input !== "" && (
        <div className="flex items-center justify-center ">
          <LoadingPage />
        </div>
      )}
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data && !postsLoading) return <div>Something went wrong</div>;

  return (
    <div>
      {data.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

export default function Home() {
  const { isLoaded: userLoaded, isSignedIn } = useUser();
  api.posts.getAll.useQuery();

  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>GGtwitter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageLayout>
        <p className="p-4 text-2xl font-bold">Home</p>

        <CreatePostWizard />
        <Feed />
      </PageLayout>
    </>
  );
}
